
AVRASM ver. 2.1.30  E:\git\Microcontroller-Password-Management-System\Debug\List\Main.asm Tue Jul 09 18:49:21 2024

E:\git\Microcontroller-Password-Management-System\Debug\List\Main.asm(1088): warning: Register r4 already defined by the .DEF directive
E:\git\Microcontroller-Password-Management-System\Debug\List\Main.asm(1089): warning: Register r5 already defined by the .DEF directive
E:\git\Microcontroller-Password-Management-System\Debug\List\Main.asm(1090): warning: Register r6 already defined by the .DEF directive
E:\git\Microcontroller-Password-Management-System\Debug\List\Main.asm(1091): warning: Register r7 already defined by the .DEF directive
E:\git\Microcontroller-Password-Management-System\Debug\List\Main.asm(1092): warning: Register r8 already defined by the .DEF directive
E:\git\Microcontroller-Password-Management-System\Debug\List\Main.asm(1093): warning: Register r9 already defined by the .DEF directive
E:\git\Microcontroller-Password-Management-System\Debug\List\Main.asm(1094): warning: Register r10 already defined by the .DEF directive
E:\git\Microcontroller-Password-Management-System\Debug\List\Main.asm(1095): warning: Register r11 already defined by the .DEF directive
E:\git\Microcontroller-Password-Management-System\Debug\List\Main.asm(1096): warning: Register r13 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.14 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega32
                 ;Program type           : Application
                 ;Clock frequency        : 8.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 512 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega32
                 	#pragma AVRPART MEMORY PROG_FLASH 32768
                 	#pragma AVRPART MEMORY EEPROM 1024
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 2048
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x085F
                 	.EQU __DSTACK_SIZE=0x0200
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _time=R4
                 	.DEF _time_msb=R5
                 	.DEF _delay=R6
                 	.DEF _delay_msb=R7
                 	.DEF _password_count=R8
                 	.DEF _password_count_msb=R9
                 	.DEF _save_count=R10
                 	.DEF _save_count_msb=R11
                 	.DEF _mode=R13
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 0045 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 012e 	JMP  _timer1_compa_isr
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
00002a 0000
00002b 0000      	.DB  0x0,0x0,0x0,0x0
00002c 0006
00002d 0000      	.DB  0x6,0x0,0x0,0x0
00002e 0000      	.DB  0x0,0x0
                 
                 _0x3:
00002f 3030
000030 3030
000031 3100
000032 3332      	.DB  0x30,0x30,0x30,0x30,0x0,0x31,0x32,0x33
000033 0034
000034 3334
000035 3132
000036 3100      	.DB  0x34,0x0,0x34,0x33,0x32,0x31,0x0,0x31
000037 3131
000038 0031
000039 3331
00003a 3038      	.DB  0x31,0x31,0x31,0x0,0x31,0x33,0x38,0x30
00003b 3100
00003c 3833
E:\git\Microcontroller-Password-Management-System\Debug\List\Main.asm(1137): warning: .cseg .db misalignment - padding zero byte
00003d 0032      	.DB  0x0,0x31,0x33,0x38,0x32
                 
                 __GLOBAL_INI_TBL:
00003e 000a      	.DW  0x0A
00003f 0004      	.DW  0x04
000040 0054      	.DW  __REG_VARS*2
                 
000041 001d      	.DW  0x1D
000042 0260      	.DW  _passwords
000043 005e      	.DW  _0x3*2
                 
                 _0xFFFFFFFF:
000044 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
000045 94f8      	CLI
000046 27ee      	CLR  R30
000047 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000048 e0f1      	LDI  R31,1
000049 bffb      	OUT  GICR,R31
00004a bfeb      	OUT  GICR,R30
00004b bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
00004c e08d      	LDI  R24,(14-2)+1
00004d e0a2      	LDI  R26,2
00004e 27bb      	CLR  R27
                 __CLEAR_REG:
00004f 93ed      	ST   X+,R30
000050 958a      	DEC  R24
000051 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000052 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000053 e098      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000054 e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
000055 93ed      	ST   X+,R30
000056 9701      	SBIW R24,1
000057 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
000058 e7ec      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000059 e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
00005a 9185      	LPM  R24,Z+
00005b 9195      	LPM  R25,Z+
00005c 9700      	SBIW R24,0
00005d f061      	BREQ __GLOBAL_INI_END
00005e 91a5      	LPM  R26,Z+
00005f 91b5      	LPM  R27,Z+
000060 9005      	LPM  R0,Z+
000061 9015      	LPM  R1,Z+
000062 01bf      	MOVW R22,R30
000063 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
000064 9005      	LPM  R0,Z+
000065 920d      	ST   X+,R0
000066 9701      	SBIW R24,1
000067 f7e1      	BRNE __GLOBAL_INI_LOOP
000068 01fb      	MOVW R30,R22
000069 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
00006a e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
00006b bfed      	OUT  SPL,R30
00006c e0e8      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
00006d bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
00006e e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
00006f e0d2      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000070 940c 0170 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x260
                 
                 	.CSEG
                 ;#include <mega32.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x80
                 	.EQU __sm_mask=0x70
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0x60
                 	.EQU __sm_ext_standby=0x70
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <delay.h>
                 ;#include <string.h>
                 ;
                 ;#define C1 PIND.2
                 ;#define C2 PIND.1
                 ;#define C3 PIND.0
                 ;
                 ;#define A PORTD.3
                 ;#define B PORTD.4
                 ;#define C PORTD.5
                 ;#define D PORTD.6
                 ;
                 ;#define correct_pass PORTD.7
                 ;#define MAX_PASSWORDS 20
                 ;#define MAX_SAVE  50
                 ;#define PASSWORD_LENGTH 5
                 ;
                 ;int time = 0, delay = 0, password_count = 6, save_count = 0;
                 ;char passwords[MAX_PASSWORDS][PASSWORD_LENGTH] =
                 ;    {"0000", "1234", "4321", "1111", "1380", "1382"};
                 
                 	.DSEG
                 ;char Seconds[MAX_SAVE], Minutes[MAX_SAVE], Hours[MAX_SAVE],
                 ;    one[MAX_SAVE], two[MAX_SAVE], three[MAX_SAVE], four[MAX_SAVE],
                 ;    mode = 0, entered_password[PASSWORD_LENGTH] = "";
                 ;
                 ;
                 ;unsigned char ReadKeypad(void) {
                 ; 0000 001B unsigned char ReadKeypad(void) {
                 
                 	.CSEG
                 _ReadKeypad:
                 ; .FSTART _ReadKeypad
                 ; 0000 001C     unsigned char result = 10;
                 ; 0000 001D     PORTD = 0x7F;
000072 931a      	ST   -Y,R17
                 ;	result -> R17
000073 e01a      	LDI  R17,10
000074 e7ef      	LDI  R30,LOW(127)
000075 bbe2      	OUT  0x12,R30
                 ; 0000 001E 
                 ; 0000 001F     A = 0;
000076 9893      	CBI  0x12,3
                 ; 0000 0020     delay_ms(3);
000077 940e 0277 	CALL SUBOPT_0x0
                 ; 0000 0021     if (C1 == 0) {
000079 9982      	SBIC 0x10,2
00007a c003      	RJMP _0x6
                 ; 0000 0022         result = '1';
00007b e311      	LDI  R17,LOW(49)
                 ; 0000 0023         while (C1 == 0);
                 _0x7:
00007c 9b82      	SBIS 0x10,2
00007d cffe      	RJMP _0x7
                 ; 0000 0024     }
                 ; 0000 0025     if (C2 == 0) {
                 _0x6:
00007e 9981      	SBIC 0x10,1
00007f c003      	RJMP _0xA
                 ; 0000 0026         result = '2';
000080 e312      	LDI  R17,LOW(50)
                 ; 0000 0027         while (C2 == 0);
                 _0xB:
000081 9b81      	SBIS 0x10,1
000082 cffe      	RJMP _0xB
                 ; 0000 0028     }
                 ; 0000 0029     if (C3 == 0) {
                 _0xA:
000083 9980      	SBIC 0x10,0
000084 c003      	RJMP _0xE
                 ; 0000 002A         result = '3';
000085 e313      	LDI  R17,LOW(51)
                 ; 0000 002B         while (C3 == 0);
                 _0xF:
000086 9b80      	SBIS 0x10,0
000087 cffe      	RJMP _0xF
                 ; 0000 002C     }
                 ; 0000 002D     A = 1;
                 _0xE:
000088 9a93      	SBI  0x12,3
                 ; 0000 002E 
                 ; 0000 002F     B = 0;
000089 9894      	CBI  0x12,4
                 ; 0000 0030     delay_ms(3);
00008a 940e 0277 	CALL SUBOPT_0x0
                 ; 0000 0031     if (C1 == 0){
00008c 9982      	SBIC 0x10,2
00008d c003      	RJMP _0x16
                 ; 0000 0032         result = '4';
00008e e314      	LDI  R17,LOW(52)
                 ; 0000 0033         while (C1 == 0);
                 _0x17:
00008f 9b82      	SBIS 0x10,2
000090 cffe      	RJMP _0x17
                 ; 0000 0034     }
                 ; 0000 0035     if (C2 == 0) {
                 _0x16:
000091 9981      	SBIC 0x10,1
000092 c003      	RJMP _0x1A
                 ; 0000 0036         result = '5';
000093 e315      	LDI  R17,LOW(53)
                 ; 0000 0037         while (C2 == 0);
                 _0x1B:
000094 9b81      	SBIS 0x10,1
000095 cffe      	RJMP _0x1B
                 ; 0000 0038     }
                 ; 0000 0039     if (C3 == 0) {
                 _0x1A:
000096 9980      	SBIC 0x10,0
000097 c003      	RJMP _0x1E
                 ; 0000 003A         result = '6';
000098 e316      	LDI  R17,LOW(54)
                 ; 0000 003B         while (C3 == 0) ;
                 _0x1F:
000099 9b80      	SBIS 0x10,0
00009a cffe      	RJMP _0x1F
                 ; 0000 003C     }
                 ; 0000 003D     B = 1;
                 _0x1E:
00009b 9a94      	SBI  0x12,4
                 ; 0000 003E 
                 ; 0000 003F     C = 0;
00009c 9895      	CBI  0x12,5
                 ; 0000 0040     delay_ms(3);
00009d 940e 0277 	CALL SUBOPT_0x0
                 ; 0000 0041     if (C1 == 0) {
00009f 9982      	SBIC 0x10,2
0000a0 c003      	RJMP _0x26
                 ; 0000 0042         result = '7';
0000a1 e317      	LDI  R17,LOW(55)
                 ; 0000 0043         while (C1 == 0);
                 _0x27:
0000a2 9b82      	SBIS 0x10,2
0000a3 cffe      	RJMP _0x27
                 ; 0000 0044     }
                 ; 0000 0045     if (C2 == 0) {
                 _0x26:
0000a4 9981      	SBIC 0x10,1
0000a5 c003      	RJMP _0x2A
                 ; 0000 0046         result = '8';
0000a6 e318      	LDI  R17,LOW(56)
                 ; 0000 0047         while (C2 == 0);
                 _0x2B:
0000a7 9b81      	SBIS 0x10,1
0000a8 cffe      	RJMP _0x2B
                 ; 0000 0048     }
                 ; 0000 0049     if (C3 == 0) {
                 _0x2A:
0000a9 9980      	SBIC 0x10,0
0000aa c003      	RJMP _0x2E
                 ; 0000 004A         result = '9';
0000ab e319      	LDI  R17,LOW(57)
                 ; 0000 004B         while (C3 == 0);
                 _0x2F:
0000ac 9b80      	SBIS 0x10,0
0000ad cffe      	RJMP _0x2F
                 ; 0000 004C     }
                 ; 0000 004D     C = 1;
                 _0x2E:
0000ae 9a95      	SBI  0x12,5
                 ; 0000 004E 
                 ; 0000 004F     D = 0;
0000af 9896      	CBI  0x12,6
                 ; 0000 0050     delay_ms(3);
0000b0 940e 0277 	CALL SUBOPT_0x0
                 ; 0000 0051     if (C1 == 0) {
0000b2 9982      	SBIC 0x10,2
0000b3 c003      	RJMP _0x36
                 ; 0000 0052         result = '*';
0000b4 e21a      	LDI  R17,LOW(42)
                 ; 0000 0053         while (C1 == 0);
                 _0x37:
0000b5 9b82      	SBIS 0x10,2
0000b6 cffe      	RJMP _0x37
                 ; 0000 0054     }
                 ; 0000 0055     if (C2 == 0) {
                 _0x36:
0000b7 9981      	SBIC 0x10,1
0000b8 c003      	RJMP _0x3A
                 ; 0000 0056         result = '0';
0000b9 e310      	LDI  R17,LOW(48)
                 ; 0000 0057         while (C2 == 0);
                 _0x3B:
0000ba 9b81      	SBIS 0x10,1
0000bb cffe      	RJMP _0x3B
                 ; 0000 0058     }
                 ; 0000 0059     if (C3 == 0) {
                 _0x3A:
0000bc 9980      	SBIC 0x10,0
0000bd c003      	RJMP _0x3E
                 ; 0000 005A         result = '#';
0000be e213      	LDI  R17,LOW(35)
                 ; 0000 005B         while (C3 == 0);
                 _0x3F:
0000bf 9b80      	SBIS 0x10,0
0000c0 cffe      	RJMP _0x3F
                 ; 0000 005C     }
                 ; 0000 005D     D = 1;
                 _0x3E:
0000c1 9a96      	SBI  0x12,6
                 ; 0000 005E 
                 ; 0000 005F     return result;
0000c2 2fe1      	MOV  R30,R17
0000c3 9119      	LD   R17,Y+
0000c4 9508      	RET
                 ; 0000 0060 }
                 ; .FEND
                 ;
                 ;void display_time(char second, char minute, char hour, char ok) {
                 ; 0000 0062 void display_time(char second, char minute, char hour, char ok) {
                 _display_time:
                 ; .FSTART _display_time
                 ; 0000 0063     unsigned char second_ones = second % 10;
                 ; 0000 0064     unsigned char second_tens = second / 10;
                 ; 0000 0065 
                 ; 0000 0066     unsigned char minute_ones = minute % 10;
                 ; 0000 0067     unsigned char minute_tens = minute / 10;
                 ; 0000 0068 
                 ; 0000 0069     unsigned char hour_ones = hour % 10;
                 ; 0000 006A     unsigned char hour_tens = hour / 10;
                 ; 0000 006B 
                 ; 0000 006C     if (!delay || ok) {
0000c5 93aa      	ST   -Y,R26
0000c6 940e 02f7 	CALL __SAVELOCR6
                 ;	second -> Y+9
                 ;	minute -> Y+8
                 ;	hour -> Y+7
                 ;	ok -> Y+6
                 ;	second_ones -> R17
                 ;	second_tens -> R16
                 ;	minute_ones -> R19
                 ;	minute_tens -> R18
                 ;	hour_ones -> R21
                 ;	hour_tens -> R20
0000c8 85a9      	LDD  R26,Y+9
0000c9 940e 027b 	CALL SUBOPT_0x1
0000cb 2f1e      	MOV  R17,R30
0000cc 85a9      	LDD  R26,Y+9
0000cd 940e 0281 	CALL SUBOPT_0x2
0000cf 2f0e      	MOV  R16,R30
0000d0 85a8      	LDD  R26,Y+8
0000d1 940e 027b 	CALL SUBOPT_0x1
0000d3 2f3e      	MOV  R19,R30
0000d4 85a8      	LDD  R26,Y+8
0000d5 940e 0281 	CALL SUBOPT_0x2
0000d7 2f2e      	MOV  R18,R30
0000d8 81af      	LDD  R26,Y+7
0000d9 940e 027b 	CALL SUBOPT_0x1
0000db 2f5e      	MOV  R21,R30
0000dc 81af      	LDD  R26,Y+7
0000dd 940e 0281 	CALL SUBOPT_0x2
0000df 2f4e      	MOV  R20,R30
0000e0 2c06      	MOV  R0,R6
0000e1 2807      	OR   R0,R7
0000e2 f019      	BREQ _0x45
0000e3 81ee      	LDD  R30,Y+6
0000e4 30e0      	CPI  R30,0
0000e5 f079      	BREQ _0x44
                 _0x45:
                 ; 0000 006D         PORTC = (second_ones << 4) | second_tens;
0000e6 2fe1      	MOV  R30,R17
0000e7 95e2      	SWAP R30
0000e8 7fe0      	ANDI R30,0xF0
0000e9 2be0      	OR   R30,R16
0000ea bbe5      	OUT  0x15,R30
                 ; 0000 006E         PORTA = (minute_tens << 4) | minute_ones;
0000eb 2fe2      	MOV  R30,R18
0000ec 95e2      	SWAP R30
0000ed 7fe0      	ANDI R30,0xF0
0000ee 2be3      	OR   R30,R19
0000ef bbeb      	OUT  0x1B,R30
                 ; 0000 006F         PORTB = (hour_tens << 4) | hour_ones;
0000f0 2fe4      	MOV  R30,R20
0000f1 95e2      	SWAP R30
0000f2 7fe0      	ANDI R30,0xF0
0000f3 2be5      	OR   R30,R21
0000f4 bbe8      	OUT  0x18,R30
                 ; 0000 0070     }
                 ; 0000 0071 }
                 _0x44:
0000f5 940e 02fe 	CALL __LOADLOCR6
0000f7 962a      	ADIW R28,10
0000f8 9508      	RET
                 ; .FEND
                 ;
                 ;void save_progress(void) {
                 ; 0000 0073 void save_progress(void) {
                 _save_progress:
                 ; .FSTART _save_progress
                 ; 0000 0074     Seconds[save_count] = time % 60;
0000f9 01f5      	MOVW R30,R10
0000fa 53ec      	SUBI R30,LOW(-_Seconds)
0000fb 4ffd      	SBCI R31,HIGH(-_Seconds)
0000fc 01bf      	MOVW R22,R30
0000fd 01d2      	MOVW R26,R4
0000fe 940e 0287 	CALL SUBOPT_0x3
                 ; 0000 0075     Minutes[save_count] = (time / 60) % 60;
000100 50ea      	SUBI R30,LOW(-_Minutes)
000101 4ffd      	SBCI R31,HIGH(-_Minutes)
000102 01bf      	MOVW R22,R30
000103 940e 028f 	CALL SUBOPT_0x4
000105 940e 0287 	CALL SUBOPT_0x3
                 ; 0000 0076     Hours[save_count] = (time / 3600) % 24;
000107 5de8      	SUBI R30,LOW(-_Hours)
000108 4ffc      	SBCI R31,HIGH(-_Hours)
000109 01bf      	MOVW R22,R30
00010a 940e 0296 	CALL SUBOPT_0x5
00010c 01db      	MOVW R26,R22
00010d 93ec      	ST   X,R30
                 ; 0000 0077     four[save_count] = entered_password[0] - '0';
00010e 01d5      	MOVW R26,R10
00010f 51a0      	SUBI R26,LOW(-_four)
000110 4fbc      	SBCI R27,HIGH(-_four)
000111 91e0 0422 	LDS  R30,_entered_password
000113 53e0      	SUBI R30,LOW(48)
000114 93ec      	ST   X,R30
                 ; 0000 0078     three[save_count] = entered_password[1] - '0';
000115 01d5      	MOVW R26,R10
000116 54a2      	SUBI R26,LOW(-_three)
000117 4fbc      	SBCI R27,HIGH(-_three)
                +
000118 91e0 0423+LDS R30 , _entered_password + ( 1 )
                 	__GETB1MN _entered_password,1
00011a 53e0      	SUBI R30,LOW(48)
00011b 93ec      	ST   X,R30
                 ; 0000 0079     two[save_count] = entered_password[2] - '0';
00011c 01d5      	MOVW R26,R10
00011d 57a4      	SUBI R26,LOW(-_two)
00011e 4fbc      	SBCI R27,HIGH(-_two)
                +
00011f 91e0 0424+LDS R30 , _entered_password + ( 2 )
                 	__GETB1MN _entered_password,2
000121 53e0      	SUBI R30,LOW(48)
000122 93ec      	ST   X,R30
                 ; 0000 007A     one[save_count] = entered_password[3] - '0';
000123 01d5      	MOVW R26,R10
000124 5aa6      	SUBI R26,LOW(-_one)
000125 4fbc      	SBCI R27,HIGH(-_one)
                +
000126 91e0 0425+LDS R30 , _entered_password + ( 3 )
                 	__GETB1MN _entered_password,3
000128 53e0      	SUBI R30,LOW(48)
000129 93ec      	ST   X,R30
                 ; 0000 007B     save_count++;
00012a 01f5      	MOVW R30,R10
00012b 9631      	ADIW R30,1
00012c 015f      	MOVW R10,R30
                 ; 0000 007C }
00012d 9508      	RET
                 ; .FEND
                 ;
                 ;interrupt [TIM1_COMPA] void timer1_compa_isr(void) {
                 ; 0000 007E interrupt [8] void timer1_compa_isr(void) {
                 _timer1_compa_isr:
                 ; .FSTART _timer1_compa_isr
00012e 920a      	ST   -Y,R0
00012f 921a      	ST   -Y,R1
000130 92fa      	ST   -Y,R15
000131 936a      	ST   -Y,R22
000132 937a      	ST   -Y,R23
000133 938a      	ST   -Y,R24
000134 939a      	ST   -Y,R25
000135 93aa      	ST   -Y,R26
000136 93ba      	ST   -Y,R27
000137 93ea      	ST   -Y,R30
000138 93fa      	ST   -Y,R31
000139 b7ef      	IN   R30,SREG
00013a 93ea      	ST   -Y,R30
                 ; 0000 007F     time++;
00013b 01f2      	MOVW R30,R4
00013c 9631      	ADIW R30,1
00013d 012f      	MOVW R4,R30
                 ; 0000 0080     if (time == 86400)
00013e 01d2      	MOVW R26,R4
00013f 940e 02b6 	CALL __CWD2
                +
000141 38a0     +CPI R26 , LOW ( 0x15180 )
000142 e5e1     +LDI R30 , HIGH ( 0x15180 )
000143 07be     +CPC R27 , R30
000144 e0e1     +LDI R30 , BYTE3 ( 0x15180 )
000145 078e     +CPC R24 , R30
000146 e0e0     +LDI R30 , BYTE4 ( 0x15180 )
000147 079e     +CPC R25 , R30
                 	__CPD2N 0x15180
000148 f439      	BRNE _0x47
                 ; 0000 0081         PORTA = PORTB = PORTC = time = 0;
000149 e0e0      	LDI  R30,LOW(0)
00014a e0f0      	LDI  R31,HIGH(0)
00014b 012f      	MOVW R4,R30
00014c bbe5      	OUT  0x15,R30
00014d bbe8      	OUT  0x18,R30
00014e bbeb      	OUT  0x1B,R30
                 ; 0000 0082     else
00014f c012      	RJMP _0x48
                 _0x47:
                 ; 0000 0083         display_time(time % 60, (time / 60) % 60, (time / 3600) % 24, 0);
000150 01d2      	MOVW R26,R4
000151 e3ec      	LDI  R30,LOW(60)
000152 e0f0      	LDI  R31,HIGH(60)
000153 940e 02db 	CALL __MODW21
000155 93ea      	ST   -Y,R30
000156 940e 028f 	CALL SUBOPT_0x4
000158 e3ec      	LDI  R30,LOW(60)
000159 e0f0      	LDI  R31,HIGH(60)
00015a 940e 02db 	CALL __MODW21
00015c 93ea      	ST   -Y,R30
00015d 940e 0296 	CALL SUBOPT_0x5
00015f 93ea      	ST   -Y,R30
000160 e0a0      	LDI  R26,LOW(0)
000161 df63      	RCALL _display_time
                 ; 0000 0084 }
                 _0x48:
000162 91e9      	LD   R30,Y+
000163 bfef      	OUT  SREG,R30
000164 91f9      	LD   R31,Y+
000165 91e9      	LD   R30,Y+
000166 91b9      	LD   R27,Y+
000167 91a9      	LD   R26,Y+
000168 9199      	LD   R25,Y+
000169 9189      	LD   R24,Y+
00016a 9179      	LD   R23,Y+
00016b 9169      	LD   R22,Y+
00016c 90f9      	LD   R15,Y+
00016d 9019      	LD   R1,Y+
00016e 9009      	LD   R0,Y+
00016f 9518      	RETI
                 ; .FEND
                 ;
                 ;void main(void) {
                 ; 0000 0086 void main(void) {
                 _main:
                 ; .FSTART _main
                 ; 0000 0087     unsigned char keypad, entered, i, j = 0;
                 ; 0000 0088 
                 ; 0000 0089     DDRA = DDRB = DDRC = 0xFF;
                 ;	keypad -> R17
                 ;	entered -> R16
                 ;	i -> R19
                 ;	j -> R18
000170 e020      	LDI  R18,0
000171 efef      	LDI  R30,LOW(255)
000172 bbe4      	OUT  0x14,R30
000173 bbe7      	OUT  0x17,R30
000174 bbea      	OUT  0x1A,R30
                 ; 0000 008A     DDRD = 0xF8;
000175 efe8      	LDI  R30,LOW(248)
000176 bbe1      	OUT  0x11,R30
                 ; 0000 008B 
                 ; 0000 008C     TCCR1A = 0x00;
000177 e0e0      	LDI  R30,LOW(0)
000178 bdef      	OUT  0x2F,R30
                 ; 0000 008D     TCCR1B = 0x0C;
000179 e0ec      	LDI  R30,LOW(12)
00017a bdee      	OUT  0x2E,R30
                 ; 0000 008E     OCR1AH = 0x7A;
00017b e7ea      	LDI  R30,LOW(122)
00017c bdeb      	OUT  0x2B,R30
                 ; 0000 008F     OCR1AL = 0x12;
00017d e1e2      	LDI  R30,LOW(18)
00017e bdea      	OUT  0x2A,R30
                 ; 0000 0090 
                 ; 0000 0091     TIMSK = 0x10;
00017f e1e0      	LDI  R30,LOW(16)
000180 bfe9      	OUT  0x39,R30
                 ; 0000 0092 
                 ; 0000 0093     #asm("sei")
000181 9478      	sei
                 ; 0000 0094 
                 ; 0000 0095     PORTA = PORTB = PORTC = time;
000182 2de4      	MOV  R30,R4
000183 bbe5      	OUT  0x15,R30
000184 bbe8      	OUT  0x18,R30
000185 bbeb      	OUT  0x1B,R30
                 ; 0000 0096     PORTD = 0X7F;
000186 e7ef      	LDI  R30,LOW(127)
000187 bbe2      	OUT  0x12,R30
                 ; 0000 0097 
                 ; 0000 0098     while (1) {
                 _0x49:
                 ; 0000 0099         keypad = ReadKeypad();
000188 dee9      	RCALL _ReadKeypad
000189 2f1e      	MOV  R17,R30
                 ; 0000 009A 
                 ; 0000 009B         if (keypad == '*') {
00018a 321a      	CPI  R17,42
00018b f469      	BRNE _0x4C
                 ; 0000 009C             delay = mode = 1;
00018c e0e1      	LDI  R30,LOW(1)
00018d 2ede      	MOV  R13,R30
00018e 2e6e      	MOV  R6,R30
00018f 2477      	CLR  R7
                 ; 0000 009D             PORTA = PORTB = PORTC = 0xAA;
000190 eaea      	LDI  R30,LOW(170)
000191 bbe5      	OUT  0x15,R30
000192 bbe8      	OUT  0x18,R30
000193 bbeb      	OUT  0x1B,R30
                 ; 0000 009E             j = 0;
000194 e020      	LDI  R18,LOW(0)
                 ; 0000 009F             entered_password[0] = '\0';
000195 e0e0      	LDI  R30,LOW(0)
000196 93e0 0422 	STS  _entered_password,R30
                 ; 0000 00A0             continue;
000198 cfef      	RJMP _0x49
                 ; 0000 00A1         }
                 ; 0000 00A2 
                 ; 0000 00A3         else if (keypad == '#') {
                 _0x4C:
000199 3213      	CPI  R17,35
00019a f009      	BREQ PC+2
00019b c04f      	RJMP _0x4E
                 ; 0000 00A4             delay = 1; mode = 2;
00019c e0e1      	LDI  R30,LOW(1)
00019d e0f0      	LDI  R31,HIGH(1)
00019e 013f      	MOVW R6,R30
00019f e0e2      	LDI  R30,LOW(2)
0001a0 2ede      	MOV  R13,R30
                 ; 0000 00A5             for (i = 0; i < save_count; i++) {
0001a1 e030      	LDI  R19,LOW(0)
                 _0x50:
0001a2 01f5      	MOVW R30,R10
0001a3 2fa3      	MOV  R26,R19
0001a4 e0b0      	LDI  R27,0
0001a5 17ae      	CP   R26,R30
0001a6 07bf      	CPC  R27,R31
0001a7 f5f4      	BRGE _0x51
                 ; 0000 00A6                 PORTA = PORTB = PORTC = 0xFF;
0001a8 efef      	LDI  R30,LOW(255)
0001a9 bbe5      	OUT  0x15,R30
0001aa bbe8      	OUT  0x18,R30
0001ab bbeb      	OUT  0x1B,R30
                 ; 0000 00A7                 delay_ms(1500);
0001ac edac      	LDI  R26,LOW(1500)
0001ad e0b5      	LDI  R27,HIGH(1500)
0001ae 940e 02a8 	CALL _delay_ms
                 ; 0000 00A8                 PORTA = (two[i] << 4) | one[i];
0001b0 2fe3      	MOV  R30,R19
0001b1 e0f0      	LDI  R31,0
0001b2 57e4      	SUBI R30,LOW(-_two)
0001b3 4ffc      	SBCI R31,HIGH(-_two)
0001b4 940e 02a1 	CALL SUBOPT_0x6
0001b6 5ae6      	SUBI R30,LOW(-_one)
0001b7 4ffc      	SBCI R31,HIGH(-_one)
0001b8 81e0      	LD   R30,Z
0001b9 2bea      	OR   R30,R26
0001ba bbeb      	OUT  0x1B,R30
                 ; 0000 00A9                 PORTB = (four[i] << 4) | three[i];
0001bb 2fe3      	MOV  R30,R19
0001bc e0f0      	LDI  R31,0
0001bd 51e0      	SUBI R30,LOW(-_four)
0001be 4ffc      	SBCI R31,HIGH(-_four)
0001bf 940e 02a1 	CALL SUBOPT_0x6
0001c1 54e2      	SUBI R30,LOW(-_three)
0001c2 4ffc      	SBCI R31,HIGH(-_three)
0001c3 81e0      	LD   R30,Z
0001c4 2bea      	OR   R30,R26
0001c5 bbe8      	OUT  0x18,R30
                 ; 0000 00AA                 PORTC = 0xAA;
0001c6 eaea      	LDI  R30,LOW(170)
0001c7 bbe5      	OUT  0x15,R30
                 ; 0000 00AB                 delay_ms(3000);
0001c8 eba8      	LDI  R26,LOW(3000)
0001c9 e0bb      	LDI  R27,HIGH(3000)
0001ca 940e 02a8 	CALL _delay_ms
                 ; 0000 00AC                 display_time(Seconds[i], Minutes[i], Hours[i], 1);
0001cc 2fe3      	MOV  R30,R19
0001cd e0f0      	LDI  R31,0
0001ce 53ec      	SUBI R30,LOW(-_Seconds)
0001cf 4ffd      	SBCI R31,HIGH(-_Seconds)
0001d0 81e0      	LD   R30,Z
0001d1 93ea      	ST   -Y,R30
0001d2 2fe3      	MOV  R30,R19
0001d3 e0f0      	LDI  R31,0
0001d4 50ea      	SUBI R30,LOW(-_Minutes)
0001d5 4ffd      	SBCI R31,HIGH(-_Minutes)
0001d6 81e0      	LD   R30,Z
0001d7 93ea      	ST   -Y,R30
0001d8 2fe3      	MOV  R30,R19
0001d9 e0f0      	LDI  R31,0
0001da 5de8      	SUBI R30,LOW(-_Hours)
0001db 4ffc      	SBCI R31,HIGH(-_Hours)
0001dc 81e0      	LD   R30,Z
0001dd 93ea      	ST   -Y,R30
0001de e0a1      	LDI  R26,LOW(1)
0001df dee5      	RCALL _display_time
                 ; 0000 00AD                 delay_ms(3000);
0001e0 eba8      	LDI  R26,LOW(3000)
0001e1 e0bb      	LDI  R27,HIGH(3000)
0001e2 940e 02a8 	CALL _delay_ms
                 ; 0000 00AE             }
0001e4 5f3f      	SUBI R19,-1
0001e5 cfbc      	RJMP _0x50
                 _0x51:
                 ; 0000 00AF             delay = mode = 0;
0001e6 e0e0      	LDI  R30,LOW(0)
0001e7 2ede      	MOV  R13,R30
0001e8 2e6e      	MOV  R6,R30
0001e9 2477      	CLR  R7
                 ; 0000 00B0         }
                 ; 0000 00B1 
                 ; 0000 00B2         else if (keypad != 10) {
0001ea c069      	RJMP _0x52
                 _0x4E:
0001eb 301a      	CPI  R17,10
0001ec f409      	BRNE PC+2
0001ed c066      	RJMP _0x53
                 ; 0000 00B3             if (j < (PASSWORD_LENGTH - 1)) {
0001ee 3024      	CPI  R18,4
0001ef f430      	BRSH _0x54
                 ; 0000 00B4                 entered_password[j] = keypad;
0001f0 2fe2      	MOV  R30,R18
0001f1 e0f0      	LDI  R31,0
0001f2 5dee      	SUBI R30,LOW(-_entered_password)
0001f3 4ffb      	SBCI R31,HIGH(-_entered_password)
0001f4 8310      	ST   Z,R17
                 ; 0000 00B5                 j++;
0001f5 5f2f      	SUBI R18,-1
                 ; 0000 00B6             }
                 ; 0000 00B7             if (j == 4) {
                 _0x54:
0001f6 3024      	CPI  R18,4
0001f7 f009      	BREQ PC+2
0001f8 c05b      	RJMP _0x55
                 ; 0000 00B8                 entered_password[j] = '\0';
0001f9 2fe2      	MOV  R30,R18
0001fa e0f0      	LDI  R31,0
0001fb 5dee      	SUBI R30,LOW(-_entered_password)
0001fc 4ffb      	SBCI R31,HIGH(-_entered_password)
0001fd e0a0      	LDI  R26,LOW(0)
0001fe 83a0      	STD  Z+0,R26
                 ; 0000 00B9                 j = 0;
0001ff e020      	LDI  R18,LOW(0)
                 ; 0000 00BA                 if (mode == 1) {
000200 e0e1      	LDI  R30,LOW(1)
000201 15ed      	CP   R30,R13
000202 f4e9      	BRNE _0x56
                 ; 0000 00BB                     if (password_count < MAX_PASSWORDS) {
000203 e1e4      	LDI  R30,LOW(20)
000204 e0f0      	LDI  R31,HIGH(20)
000205 168e      	CP   R8,R30
000206 069f      	CPC  R9,R31
000207 f4a4      	BRGE _0x57
                 ; 0000 00BC                         strcpy(passwords[password_count], entered_password);
000208 01f4      	MOVW R30,R8
000209 e0a5      	LDI  R26,LOW(5)
00020a e0b0      	LDI  R27,HIGH(5)
00020b 940e 02bb 	CALL __MULW12U
00020d 5ae0      	SUBI R30,LOW(-_passwords)
00020e 4ffd      	SBCI R31,HIGH(-_passwords)
00020f 93fa      	ST   -Y,R31
000210 93ea      	ST   -Y,R30
000211 e2a2      	LDI  R26,LOW(_entered_password)
000212 e0b4      	LDI  R27,HIGH(_entered_password)
000213 940e 026a 	CALL _strcpy
                 ; 0000 00BD                         password_count++;
000215 01f4      	MOVW R30,R8
000216 9631      	ADIW R30,1
000217 014f      	MOVW R8,R30
                 ; 0000 00BE                         delay = mode = 0;
000218 e0e0      	LDI  R30,LOW(0)
000219 2ede      	MOV  R13,R30
00021a 2e6e      	MOV  R6,R30
00021b 2477      	CLR  R7
                 ; 0000 00BF                     }
                 ; 0000 00C0                     entered_password[0] = '\0';
                 _0x57:
00021c e0e0      	LDI  R30,LOW(0)
00021d 93e0 0422 	STS  _entered_password,R30
                 ; 0000 00C1                     continue;
00021f cf68      	RJMP _0x49
                 ; 0000 00C2                 }
                 ; 0000 00C3                 entered = 0;
                 _0x56:
000220 e000      	LDI  R16,LOW(0)
                 ; 0000 00C4                 for (i = 0; i < password_count; i++)
000221 e030      	LDI  R19,LOW(0)
                 _0x59:
000222 01f4      	MOVW R30,R8
000223 2fa3      	MOV  R26,R19
000224 e0b0      	LDI  R27,0
000225 17ae      	CP   R26,R30
000226 07bf      	CPC  R27,R31
000227 f48c      	BRGE _0x5A
                 ; 0000 00C5                     if (strcmp(entered_password, passwords[i]) == 0)
000228 e2e2      	LDI  R30,LOW(_entered_password)
000229 e0f4      	LDI  R31,HIGH(_entered_password)
00022a 93fa      	ST   -Y,R31
00022b 93ea      	ST   -Y,R30
00022c e0a5      	LDI  R26,LOW(5)
00022d 9f3a      	MUL  R19,R26
00022e 01f0      	MOVW R30,R0
00022f 5ae0      	SUBI R30,LOW(-_passwords)
000230 4ffd      	SBCI R31,HIGH(-_passwords)
000231 01df      	MOVW R26,R30
000232 940e 0256 	CALL _strcmp
000234 30e0      	CPI  R30,0
000235 f409      	BRNE _0x5B
                 ; 0000 00C6                         entered = 1;
000236 e001      	LDI  R16,LOW(1)
                 ; 0000 00C7 
                 ; 0000 00C8                 if (entered) {
                 _0x5B:
000237 5f3f      	SUBI R19,-1
000238 cfe9      	RJMP _0x59
                 _0x5A:
000239 3000      	CPI  R16,0
00023a f041      	BREQ _0x5C
                 ; 0000 00C9                     save_progress();
00023b debd      	RCALL _save_progress
                 ; 0000 00CA                     correct_pass = 1;
00023c 9a97      	SBI  0x12,7
                 ; 0000 00CB                     delay_ms(1500);
00023d edac      	LDI  R26,LOW(1500)
00023e e0b5      	LDI  R27,HIGH(1500)
00023f 940e 02a8 	CALL _delay_ms
                 ; 0000 00CC                     correct_pass = 0;
000241 9897      	CBI  0x12,7
                 ; 0000 00CD                 } else {
000242 c00c      	RJMP _0x61
                 _0x5C:
                 ; 0000 00CE                     PORTA = PORTC = 0x00;
000243 e0e0      	LDI  R30,LOW(0)
000244 bbe5      	OUT  0x15,R30
000245 bbeb      	OUT  0x1B,R30
                 ; 0000 00CF                     PORTB = 0xDD;
000246 eded      	LDI  R30,LOW(221)
000247 bbe8      	OUT  0x18,R30
                 ; 0000 00D0                     delay = 1;
000248 e0e1      	LDI  R30,LOW(1)
000249 e0f0      	LDI  R31,HIGH(1)
00024a 013f      	MOVW R6,R30
                 ; 0000 00D1                     delay_ms(2000);
00024b eda0      	LDI  R26,LOW(2000)
00024c e0b7      	LDI  R27,HIGH(2000)
00024d 940e 02a8 	CALL _delay_ms
                 ; 0000 00D2                 }
                 _0x61:
                 ; 0000 00D3                 delay = 0;
00024f 2466      	CLR  R6
000250 2477      	CLR  R7
                 ; 0000 00D4                 entered_password[0] = '\0';
000251 e0e0      	LDI  R30,LOW(0)
000252 93e0 0422 	STS  _entered_password,R30
                 ; 0000 00D5             }
                 ; 0000 00D6         }
                 _0x55:
                 ; 0000 00D7     }
                 _0x53:
                 _0x52:
000254 cf33      	RJMP _0x49
                 ; 0000 00D8 }
                 _0x62:
000255 cfff      	RJMP _0x62
                 ; .FEND
                 
                 	.CSEG
                 _strcmp:
                 ; .FSTART _strcmp
000256 93ba      	ST   -Y,R27
000257 93aa      	ST   -Y,R26
000258 91e9          ld   r30,y+
000259 91f9          ld   r31,y+
00025a 91a9          ld   r26,y+
00025b 91b9          ld   r27,y+
                 strcmp0:
00025c 916d          ld   r22,x+
00025d 9171          ld   r23,z+
00025e 1767          cp   r22,r23
00025f f421          brne strcmp1
000260 2366          tst  r22
000261 f7d1          brne strcmp0
                 strcmp3:
000262 27ee          clr  r30
000263 9508          ret
                 strcmp1:
000264 1b67          sub  r22,r23
000265 f3e1          breq strcmp3
000266 e0e1          ldi  r30,1
000267 f408          brcc strcmp2
000268 50e2          subi r30,2
                 strcmp2:
000269 9508          ret
                 ; .FEND
                 _strcpy:
                 ; .FSTART _strcpy
00026a 93ba      	ST   -Y,R27
00026b 93aa      	ST   -Y,R26
00026c 91e9          ld   r30,y+
00026d 91f9          ld   r31,y+
00026e 91a9          ld   r26,y+
00026f 91b9          ld   r27,y+
000270 01cd          movw r24,r26
                 strcpy0:
000271 9161          ld   r22,z+
000272 936d          st   x+,r22
000273 2366          tst  r22
000274 f7e1          brne strcpy0
000275 01fc          movw r30,r24
000276 9508          ret
                 ; .FEND
                 
                 	.DSEG
                 _passwords:
000260           	.BYTE 0x64
                 _Seconds:
0002c4           	.BYTE 0x32
                 _Minutes:
0002f6           	.BYTE 0x32
                 _Hours:
000328           	.BYTE 0x32
                 _one:
00035a           	.BYTE 0x32
                 _two:
00038c           	.BYTE 0x32
                 _three:
0003be           	.BYTE 0x32
                 _four:
0003f0           	.BYTE 0x32
                 _entered_password:
000422           	.BYTE 0x5
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x0:
000277 e0a3      	LDI  R26,LOW(3)
000278 e0b0      	LDI  R27,0
000279 940c 02a8 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x1:
00027b 27bb      	CLR  R27
00027c e0ea      	LDI  R30,LOW(10)
00027d e0f0      	LDI  R31,HIGH(10)
00027e 940e 02db 	CALL __MODW21
000280 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x2:
000281 e0b0      	LDI  R27,0
000282 e0ea      	LDI  R30,LOW(10)
000283 e0f0      	LDI  R31,HIGH(10)
000284 940e 02d6 	CALL __DIVW21
000286 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x3:
000287 e3ec      	LDI  R30,LOW(60)
000288 e0f0      	LDI  R31,HIGH(60)
000289 940e 02db 	CALL __MODW21
00028b 01db      	MOVW R26,R22
00028c 93ec      	ST   X,R30
00028d 01f5      	MOVW R30,R10
00028e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x4:
00028f 01d2      	MOVW R26,R4
000290 e3ec      	LDI  R30,LOW(60)
000291 e0f0      	LDI  R31,HIGH(60)
000292 940e 02d6 	CALL __DIVW21
000294 01df      	MOVW R26,R30
000295 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x5:
000296 01d2      	MOVW R26,R4
000297 e1e0      	LDI  R30,LOW(3600)
000298 e0fe      	LDI  R31,HIGH(3600)
000299 940e 02d6 	CALL __DIVW21
00029b 01df      	MOVW R26,R30
00029c e1e8      	LDI  R30,LOW(24)
00029d e0f0      	LDI  R31,HIGH(24)
00029e 940e 02db 	CALL __MODW21
0002a0 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x6:
0002a1 81e0      	LD   R30,Z
0002a2 95e2      	SWAP R30
0002a3 7fe0      	ANDI R30,0xF0
0002a4 2fae      	MOV  R26,R30
0002a5 2fe3      	MOV  R30,R19
0002a6 e0f0      	LDI  R31,0
0002a7 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
0002a8 9610      	adiw r26,0
0002a9 f039      	breq __delay_ms1
                 __delay_ms0:
0002aa 95a8      	wdr
                +
0002ab ed80     +LDI R24 , LOW ( 0x7D0 )
0002ac e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
0002ad 9701     +SBIW R24 , 1
0002ae f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
0002af 9711      	sbiw r26,1
0002b0 f7c9      	brne __delay_ms0
                 __delay_ms1:
0002b1 9508      	ret
                 
                 __ANEGW1:
0002b2 95f1      	NEG  R31
0002b3 95e1      	NEG  R30
0002b4 40f0      	SBCI R31,0
0002b5 9508      	RET
                 
                 __CWD2:
0002b6 2f8b      	MOV  R24,R27
0002b7 0f88      	ADD  R24,R24
0002b8 0b88      	SBC  R24,R24
0002b9 2f98      	MOV  R25,R24
0002ba 9508      	RET
                 
                 __MULW12U:
0002bb 9ffa      	MUL  R31,R26
0002bc 2df0      	MOV  R31,R0
0002bd 9feb      	MUL  R30,R27
0002be 0df0      	ADD  R31,R0
0002bf 9fea      	MUL  R30,R26
0002c0 2de0      	MOV  R30,R0
0002c1 0df1      	ADD  R31,R1
0002c2 9508      	RET
                 
                 __DIVW21U:
0002c3 2400      	CLR  R0
0002c4 2411      	CLR  R1
0002c5 e190      	LDI  R25,16
                 __DIVW21U1:
0002c6 0faa      	LSL  R26
0002c7 1fbb      	ROL  R27
0002c8 1c00      	ROL  R0
0002c9 1c11      	ROL  R1
0002ca 1a0e      	SUB  R0,R30
0002cb 0a1f      	SBC  R1,R31
0002cc f418      	BRCC __DIVW21U2
0002cd 0e0e      	ADD  R0,R30
0002ce 1e1f      	ADC  R1,R31
0002cf c001      	RJMP __DIVW21U3
                 __DIVW21U2:
0002d0 60a1      	SBR  R26,1
                 __DIVW21U3:
0002d1 959a      	DEC  R25
0002d2 f799      	BRNE __DIVW21U1
0002d3 01fd      	MOVW R30,R26
0002d4 01d0      	MOVW R26,R0
0002d5 9508      	RET
                 
                 __DIVW21:
0002d6 d012      	RCALL __CHKSIGNW
0002d7 dfeb      	RCALL __DIVW21U
0002d8 f40e      	BRTC __DIVW211
0002d9 dfd8      	RCALL __ANEGW1
                 __DIVW211:
0002da 9508      	RET
                 
                 __MODW21:
0002db 94e8      	CLT
0002dc ffb7      	SBRS R27,7
0002dd c004      	RJMP __MODW211
0002de 95a0      	COM  R26
0002df 95b0      	COM  R27
0002e0 9611      	ADIW R26,1
0002e1 9468      	SET
                 __MODW211:
0002e2 fdf7      	SBRC R31,7
0002e3 dfce      	RCALL __ANEGW1
0002e4 dfde      	RCALL __DIVW21U
0002e5 01fd      	MOVW R30,R26
0002e6 f40e      	BRTC __MODW212
0002e7 dfca      	RCALL __ANEGW1
                 __MODW212:
0002e8 9508      	RET
                 
                 __CHKSIGNW:
0002e9 94e8      	CLT
0002ea fff7      	SBRS R31,7
0002eb c002      	RJMP __CHKSW1
0002ec dfc5      	RCALL __ANEGW1
0002ed 9468      	SET
                 __CHKSW1:
0002ee ffb7      	SBRS R27,7
0002ef c006      	RJMP __CHKSW2
0002f0 95a0      	COM  R26
0002f1 95b0      	COM  R27
0002f2 9611      	ADIW R26,1
0002f3 f800      	BLD  R0,0
0002f4 9403      	INC  R0
0002f5 fa00      	BST  R0,0
                 __CHKSW2:
0002f6 9508      	RET
                 
                 __SAVELOCR6:
0002f7 935a      	ST   -Y,R21
                 __SAVELOCR5:
0002f8 934a      	ST   -Y,R20
                 __SAVELOCR4:
0002f9 933a      	ST   -Y,R19
                 __SAVELOCR3:
0002fa 932a      	ST   -Y,R18
                 __SAVELOCR2:
0002fb 931a      	ST   -Y,R17
0002fc 930a      	ST   -Y,R16
0002fd 9508      	RET
                 
                 __LOADLOCR6:
0002fe 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
0002ff 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
000300 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
000301 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
000302 8119      	LDD  R17,Y+1
000303 8108      	LD   R16,Y
000304 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega32 register use summary:
r0 :  20 r1 :   8 r2 :   0 r3 :   0 r4 :   9 r5 :   0 r6 :   7 r7 :   5 
r8 :   5 r9 :   1 r10:   9 r11:   0 r12:   0 r13:   5 r14:   0 r15:   2 
r16:   7 r17:  25 r18:  12 r19:  17 r20:   4 r21:   4 r22:  16 r23:   5 
r24:  20 r25:   9 r26:  70 r27:  34 r28:   2 r29:   1 r30: 224 r31:  57 
x  :  11 y  :  68 z  :  17 
Registers used: 29 out of 35 (82.9%)

ATmega32 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   1 add   :   4 
adiw  :   7 and   :   0 andi  :   4 asr   :   0 bclr  :   0 bld   :   1 
brbc  :   0 brbs  :   0 brcc  :   2 brcs  :   0 break :   0 breq  :   8 
brge  :   3 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   0 
brlt  :   0 brmi  :   0 brne  :  14 brpl  :   0 brsh  :   1 brtc  :   2 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   1 call  :  37 
cbi   :   5 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :  11 cls   :   0 clt   :   2 clv   :   0 clz   :   0 com   :   4 
cp    :   5 cpc   :   6 cpi   :   9 cpse  :   0 dec   :   2 des   :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :   1 inc   :   1 jmp   :  23 ld    :  31 ldd   :  12 ldi   : 118 
lds   :   4 lpm   :   7 lsl   :   1 lsr   :   0 mov   :  35 movw  :  40 
mul   :   4 muls  :   0 mulsu :   0 neg   :   2 nop   :   0 or    :   6 
ori   :   0 out   :  39 pop   :   0 push  :   0 rcall :  11 ret   :  22 
reti  :   1 rjmp  :  41 rol   :   3 ror   :   0 sbc   :   2 sbci  :  19 
sbi   :   5 sbic  :  12 sbis  :  12 sbiw  :   5 sbr   :   1 sbrc  :   1 
sbrs  :   3 sec   :   0 seh   :   0 sei   :   1 sen   :   0 ser   :   0 
ses   :   0 set   :   2 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  45 std   :   1 sts   :   3 sub   :   2 subi  :  26 swap  :   4 
tst   :   2 wdr   :   1 
Instructions used: 61 out of 116 (52.6%)

ATmega32 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x00060a   1492     54   1546   32768   4.7%
[.dseg] 0x000060 0x000427      0    455    455    2048  22.2%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 10 warnings
